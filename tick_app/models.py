from lib2to3.pgen2 import token
from sqlite3 import Timestamp
from xml.etree.ElementTree import Comment
from django.db import models
# from django.utils import timezone
# from django.utils.translation import gettext_lazy as _
# from django.contrib.auth.models import AbstractBaseUser, PermissionsMixin, BaseUserManager

class Company(models.Model):
    symbol = models.CharField(null=False, max_length=200)
    company_name = models.CharField(null=True, max_length=200)
    isin = models.CharField(null=True, max_length=200)
    currency = models.CharField(null=True, max_length=200)
    exchange = models.CharField(null=True, max_length=200)
    industry = models.CharField(null=True, max_length=200)
    sector = models.CharField(null=True, max_length=200)
    country = models.CharField(null=True, max_length=200)
    city = models.CharField(null=True, max_length=200)
    market = models.CharField(null=True, max_length=200)
    indexes = models.CharField(null=True, max_length=200)
    ipo_date = models.CharField(null=True, max_length=200)
    description = models.TextField(null=True, max_length=200)
    website = models.CharField(null=True, max_length=200)
    delisted = models.IntegerField(null=True)


class DataType(models.Model):
    type = models.CharField(null=False, max_length=200)
    category = models.CharField(null=False, max_length=200)
    target_table = models.CharField(null=False, max_length=200)


class YearLimit(models.Model):
    limit = models.CharField(null=False, max_length=200)


class CFlow(models.Model):
    symbol = models.CharField(null=True, max_length=200)
    date = models.CharField(null=True, max_length=200)
    netIncome = models.FloatField(null=True)
    depreciationAndAmortization = models.FloatField(null=True)
    deferredIncomeTax = models.FloatField(null=True)
    stockBasedCompensation = models.FloatField(null=True)
    changeInWorkingCapital = models.FloatField(null=True)
    accountsReceivables = models.FloatField(null=True)
    inventory = models.FloatField(null=True)
    accountsPayables = models.FloatField(null=True)
    otherWorkingCapital = models.FloatField(null=True)
    otherNonCashItems = models.FloatField(null=True)
    netCashProvidedByOperatingActivities = models.FloatField(null=True)
    investmentsInPropertyPlantAndEquipment = models.FloatField(null=True)
    acquisitionsNet = models.FloatField(null=True)
    purchasesOfInvestments = models.FloatField(null=True)
    salesMaturitiesOfInvestments = models.FloatField(null=True)
    otherInvestingActivites = models.FloatField(null=True)
    netCashUsedForInvestingActivites = models.FloatField(null=True)
    debtRepayment = models.FloatField(null=True)
    commonStockIssued = models.FloatField(null=True)
    commonStockRepurchased = models.FloatField(null=True)
    dividendsPaid = models.FloatField(null=True)
    otherFinancingActivites = models.FloatField(null=True)
    netCashUsedProvidedByFinancingActivities = models.FloatField(null=True)
    effectOfForexChangesOnCash = models.FloatField(null=True)
    netChangeInCash = models.FloatField(null=True)
    cashAtEndOfPeriod = models.FloatField(null=True)
    cashAtBeginningOfPeriod = models.FloatField(null=True)
    operatingCashFlow = models.FloatField(null=True)
    capitalExpenditure = models.FloatField(null=True)
    freeCashFlow = models.FloatField(null=True)


class CFlowGrowth(models.Model):

    date = models.CharField(null=True, max_length=200)
    symbol = models.CharField(null=True, max_length=200)
    period = models.CharField(null=True, max_length=200)
    growthNetIncome = models.FloatField(null=True)
    growthDepreciationAndAmortization = models.FloatField(null=True)
    growthDeferredIncomeTax = models.FloatField(null=True)
    growthStockBasedCompensation = models.FloatField(null=True)
    growthChangeInWorkingCapital = models.FloatField(null=True)
    growthAccountsReceivables = models.FloatField(null=True)
    growthInventory = models.FloatField(null=True)
    growthAccountsPayables = models.FloatField(null=True)
    growthOtherWorkingCapital = models.FloatField(null=True)
    growthOtherNonCashItems = models.FloatField(null=True)
    growthNetCashProvidedByOperatingActivites = models.FloatField(null=True)
    growthInvestmentsInPropertyPlantAndEquipment = models.FloatField(null=True)
    growthAcquisitionsNet = models.FloatField(null=True)
    growthPurchasesOfInvestments = models.FloatField(null=True)
    growthSalesMaturitiesOfInvestments = models.FloatField(null=True)
    growthOtherInvestingActivites = models.FloatField(null=True)
    growthNetCashUsedForInvestingActivites = models.FloatField(null=True)
    growthDebtRepayment = models.FloatField(null=True)
    growthCommonStockIssued = models.FloatField(null=True)
    growthCommonStockRepurchased = models.FloatField(null=True)
    growthDividendsPaid = models.FloatField(null=True)
    growthOtherFinancingActivites = models.FloatField(null=True)
    growthNetCashUsedProvidedByFinancingActivities = models.FloatField(null=True)
    growthEffectOfForexChangesOnCash = models.FloatField(null=True)
    growthNetChangeInCash = models.FloatField(null=True)
    growthCashAtEndOfPeriod = models.FloatField(null=True)
    growthCashAtBeginningOfPeriod = models.FloatField(null=True)
    growthOperatingCashFlow = models.FloatField(null=True)
    growthCapitalExpenditure = models.FloatField(null=True)
    growthFreeCashFlow = models.FloatField(null=True)


class RatiosTTM(models.Model):

    symbol = models.CharField(null=True, max_length=200)
    dividendYielTTM = models.FloatField(null=True)
    dividendYielPercentageTTM = models.FloatField(null=True)
    peRatioTTM = models.FloatField(null=True)
    pegRatioTTM = models.FloatField(null=True)
    payoutRatioTTM = models.FloatField(null=True)
    currentRatioTTM = models.FloatField(null=True)
    quickRatioTTM = models.FloatField(null=True)
    cashRatioTTM = models.FloatField(null=True)
    daysOfSalesOutstandingTTM = models.FloatField(null=True)
    daysOfInventoryOutstandingTTM = models.FloatField(null=True)
    operatingCycleTTM = models.FloatField(null=True)
    daysOfPayablesOutstandingTTM = models.FloatField(null=True)
    cashConversionCycleTTM = models.FloatField(null=True)
    grossProfitMarginTTM = models.FloatField(null=True)
    operatingProfitMarginTTM = models.FloatField(null=True)
    pretaxProfitMarginTTM = models.FloatField(null=True)
    netProfitMarginTTM = models.FloatField(null=True)
    effectiveTaxRateTTM = models.FloatField(null=True)
    returnOnAssetsTTM = models.FloatField(null=True)
    returnOnEquityTTM = models.FloatField(null=True)
    returnOnCapitalEmployedTTM = models.FloatField(null=True)
    netIncomePerEBTTTM = models.FloatField(null=True)
    ebtPerEbitTTM = models.FloatField(null=True)
    ebitPerRevenueTTM = models.FloatField(null=True)
    debtRatioTTM = models.FloatField(null=True)
    debtEquityRatioTTM = models.FloatField(null=True)
    longTermDebtToCapitalizationTTM = models.FloatField(null=True)
    totalDebtToCapitalizationTTM = models.FloatField(null=True)
    interestCoverageTTM = models.FloatField(null=True)
    cashFlowToDebtRatioTTM = models.FloatField(null=True)
    companyEquityMultiplierTTM = models.FloatField(null=True)
    receivablesTurnoverTTM = models.FloatField(null=True)
    payablesTurnoverTTM = models.FloatField(null=True)
    inventoryTurnoverTTM = models.FloatField(null=True)
    fixedAssetTurnoverTTM = models.FloatField(null=True)
    assetTurnoverTTM = models.FloatField(null=True)
    operatingCashFlowPerShareTTM = models.FloatField(null=True)
    freeCashFlowPerShareTTM = models.FloatField(null=True)
    cashPerShareTTM = models.FloatField(null=True)
    operatingCashFlowSalesRatioTTM = models.FloatField(null=True)
    freeCashFlowOperatingCashFlowRatioTTM = models.FloatField(null=True)
    cashFlowCoverageRatiosTTM = models.FloatField(null=True)
    shortTermCoverageRatiosTTM = models.FloatField(null=True)
    capitalExpenditureCoverageRatioTTM = models.FloatField(null=True)
    dividendPaidAndCapexCoverageRatioTTM = models.FloatField(null=True)
    priceBookValueRatioTTM = models.FloatField(null=True)
    priceToBookRatioTTM = models.FloatField(null=True)
    priceToSalesRatioTTM = models.FloatField(null=True)
    priceEarningsRatioTTM = models.FloatField(null=True)
    priceToFreeCashFlowsRatioTTM = models.FloatField(null=True)
    priceToOperatingCashFlowsRatioTTM = models.FloatField(null=True)
    priceCashFlowRatioTTM = models.FloatField(null=True)
    priceEarningsToGrowthRatioTTM = models.FloatField(null=True)
    priceSalesRatioTTM = models.FloatField(null=True)
    dividendYieldTTM = models.FloatField(null=True)
    enterpriseValueMultipleTTM = models.FloatField(null=True)
    priceFairValueTTM = models.FloatField(null=True)
    dividendPerShareTTM = models.FloatField(null=True)


class Ratios(models.Model):
    symbol = models.CharField(null=True, max_length=200)
    date = models.CharField(null=True, max_length=200)
    period = models.CharField(null=True, max_length=200)
    currentRatio = models.FloatField(null=True)
    quickRatio = models.FloatField(null=True)
    cashRatio = models.FloatField(null=True)
    daysOfSalesOutstanding = models.FloatField(null=True)
    daysOfInventoryOutstanding = models.FloatField(null=True)
    operatingCycle = models.FloatField(null=True)
    daysOfPayablesOutstanding = models.FloatField(null=True)
    cashConversionCycle = models.FloatField(null=True)
    grossProfitMargin = models.FloatField(null=True)
    operatingProfitMargin = models.FloatField(null=True)
    pretaxProfitMargin = models.FloatField(null=True)
    netProfitMargin = models.FloatField(null=True)
    effectiveTaxRate = models.FloatField(null=True)
    returnOnAssets = models.FloatField(null=True)
    returnOnEquity = models.FloatField(null=True)
    returnOnCapitalEmployed = models.FloatField(null=True)
    netIncomePerEBT = models.FloatField(null=True)
    ebtPerEbit = models.FloatField(null=True)
    ebitPerRevenue = models.FloatField(null=True)
    debtRatio = models.FloatField(null=True)
    debtEquityRatio = models.FloatField(null=True)
    longTermDebtToCapitalization = models.FloatField(null=True)
    totalDebtToCapitalization = models.FloatField(null=True)
    interestCoverage = models.FloatField(null=True)
    cashFlowToDebtRatio = models.FloatField(null=True)
    companyEquityMultiplier = models.FloatField(null=True)
    receivablesTurnover = models.FloatField(null=True)
    payablesTurnover = models.FloatField(null=True)
    inventoryTurnover = models.FloatField(null=True)
    fixedAssetTurnover = models.FloatField(null=True)
    assetTurnover = models.FloatField(null=True)
    operatingCashFlowPerShare = models.FloatField(null=True)
    freeCashFlowPerShare = models.FloatField(null=True)
    cashPerShare = models.FloatField(null=True)
    payoutRatio = models.FloatField(null=True)
    operatingCashFlowSalesRatio = models.FloatField(null=True)
    freeCashFlowOperatingCashFlowRatio = models.FloatField(null=True)
    cashFlowCoverageRatios = models.FloatField(null=True)
    shortTermCoverageRatios = models.FloatField(null=True)
    capitalExpenditureCoverageRatio = models.FloatField(null=True)
    dividendPaidAndCapexCoverageRatio = models.FloatField(null=True)
    dividendPayoutRatio = models.FloatField(null=True)
    priceBookValueRatio = models.FloatField(null=True)
    priceToBookRatio = models.FloatField(null=True)
    priceToSalesRatio = models.FloatField(null=True)
    priceEarningsRatio = models.FloatField(null=True)
    priceToFreeCashFlowsRatio = models.FloatField(null=True)
    priceToOperatingCashFlowsRatio = models.FloatField(null=True)
    priceCashFlowRatio = models.FloatField(null=True)
    priceEarningsToGrowthRatio = models.FloatField(null=True)
    priceSalesRatio = models.FloatField(null=True)
    dividendYield = models.FloatField(null=True)
    enterpriseValueMultiple = models.FloatField(null=True)
    priceFairValue = models.FloatField(null=True)


class BSheet(models.Model):
    symbol = models.CharField(null=True, max_length=200)
    date = models.CharField(null=True, max_length=200)
    cashAndCashEquivalents = models.FloatField(null=True)
    shortTermInvestments = models.FloatField(null=True)
    cashAndShortTermInvestments = models.FloatField(null=True)
    netReceivables = models.FloatField(null=True)
    inventory = models.FloatField(null=True)
    otherCurrentAssets = models.FloatField(null=True)
    totalCurrentAssets = models.FloatField(null=True)
    propertyPlantEquipmentNet = models.FloatField(null=True)
    goodwill = models.FloatField(null=True)
    intangibleAssets = models.FloatField(null=True)
    goodwillAndIntangibleAssets = models.FloatField(null=True)
    longTermInvestments = models.FloatField(null=True)
    taxAssets = models.FloatField(null=True)
    otherNonCurrentAssets = models.FloatField(null=True)
    totalNonCurrentAssets = models.FloatField(null=True)
    otherAssets = models.FloatField(null=True)
    totalAssets = models.FloatField(null=True)
    accountPayables = models.FloatField(null=True)
    shortTermDebt = models.FloatField(null=True)
    taxPayables = models.FloatField(null=True)
    deferredRevenue = models.FloatField(null=True)
    otherCurrentLiabilities = models.FloatField(null=True)
    totalCurrentLiabilities = models.FloatField(null=True)
    longTermDebt = models.FloatField(null=True)
    deferredRevenueNonCurrent = models.FloatField(null=True)
    deferredTaxLiabilitiesNonCurrent = models.FloatField(null=True)
    otherNonCurrentLiabilities = models.FloatField(null=True)
    totalNonCurrentLiabilities = models.FloatField(null=True)
    otherLiabilities = models.FloatField(null=True)
    totalLiabilities = models.FloatField(null=True)
    commonStock = models.FloatField(null=True)
    retainedEarnings = models.FloatField(null=True)
    accumulatedOtherComprehensiveIncomeLoss = models.FloatField(null=True)
    othertotalStockholdersEquity = models.FloatField(null=True)
    totalStockholdersEquity = models.BigIntegerField(null=True)
    totalLiabilitiesAndStockholdersEquity = models.BigIntegerField(null=True)
    totalInvestments = models.BigIntegerField(null=True)
    totalDebt = models.BigIntegerField(null=True)
    netDebt = models.BigIntegerField(null=True)


class BSheetGrowth(models.Model):

    date = models.CharField(null=True, max_length=200)
    symbol = models.CharField(null=True, max_length=200)
    period = models.CharField(null=True, max_length=200)
    growthCashAndCashEquivalents = models.FloatField(null=True)
    growthShortTermInvestments = models.FloatField(null=True)
    growthCashAndShortTermInvestments = models.FloatField(null=True)
    growthNetReceivables = models.FloatField(null=True)
    growthInventory = models.FloatField(null=True)
    growthOtherCurrentAssets = models.FloatField(null=True)
    growthTotalCurrentAssets = models.FloatField(null=True)
    growthPropertyPlantEquipmentNet = models.FloatField(null=True)
    growthGoodwill = models.FloatField(null=True)
    growthIntangibleAssets = models.FloatField(null=True)
    growthGoodwillAndIntangibleAssets = models.FloatField(null=True)
    growthLongTermInvestments = models.FloatField(null=True)
    growthTaxAssets = models.FloatField(null=True)
    growthOtherNonCurrentAssets = models.FloatField(null=True)
    growthTotalNonCurrentAssets = models.FloatField(null=True)
    growthOtherAssets = models.FloatField(null=True)
    growthTotalAssets = models.FloatField(null=True)
    growthAccountPayables = models.FloatField(null=True)
    growthShortTermDebt = models.FloatField(null=True)
    growthTaxPayables = models.FloatField(null=True)
    growthDeferredRevenue = models.FloatField(null=True)
    growthOtherCurrentLiabilities = models.FloatField(null=True)
    growthTotalCurrentLiabilities = models.FloatField(null=True)
    growthLongTermDebt = models.FloatField(null=True)
    growthDeferredRevenueNonCurrent = models.FloatField(null=True)
    growthDeferrredTaxLiabilitiesNonCurrent = models.FloatField(null=True)
    growthOtherNonCurrentLiabilities = models.FloatField(null=True)
    growthTotalNonCurrentLiabilities = models.FloatField(null=True)
    growthOtherLiabilities = models.FloatField(null=True)
    growthTotalLiabilities = models.FloatField(null=True)
    growthCommonStock = models.FloatField(null=True)
    growthRetainedEarnings = models.FloatField(null=True)
    growthAccumulatedOtherComprehensiveIncomeLoss = models.FloatField(null=True)
    growthOthertotalStockholdersEquity = models.FloatField(null=True)
    growthTotalStockholdersEquity = models.FloatField(null=True)
    growthTotalLiabilitiesAndStockholdersEquity = models.FloatField(null=True)
    growthTotalInvestments = models.FloatField(null=True)
    growthTotalDebt = models.FloatField(null=True)
    growthNetDebt = models.FloatField(null=True)


class Income(models.Model):
    symbol = models.CharField(null=True, max_length=200)
    date = models.CharField(null=True, max_length=200)
    revenue = models.FloatField(null=True)
    costOfRevenue = models.FloatField(null=True)
    grossProfit = models.FloatField(null=True)
    grossProfitRatio = models.FloatField(null=True)
    researchAndDevelopmentExpenses = models.FloatField(null=True)
    generalAndAdministrativeExpenses = models.FloatField(null=True)
    sellingAndMarketingExpenses = models.FloatField(null=True)
    otherExpenses = models.FloatField(null=True)
    operatingExpenses = models.FloatField(null=True)
    costAndExpenses = models.FloatField(null=True)
    interestExpense = models.FloatField(null=True)
    depreciationAndAmortization = models.FloatField(null=True)
    ebitda = models.FloatField(null=True)
    ebitdaratio = models.FloatField(null=True)
    operatingIncome = models.FloatField(null=True)
    operatingIncomeRatio = models.FloatField(null=True)
    totalOtherIncomeExpensesNet = models.FloatField(null=True)
    incomeBeforeTax = models.FloatField(null=True)
    incomeBeforeTaxRatio = models.FloatField(null=True)
    incomeTaxExpense = models.FloatField(null=True)
    netIncome = models.FloatField(null=True)
    netIncomeRatio = models.FloatField(null=True)
    eps = models.FloatField(null=True)
    epsdiluted = models.FloatField(null=True)
    weightedAverageShsOut = models.FloatField(null=True)
    weightedAverageShsOutDil = models.FloatField(null=True)


class IncomeGrowth(models.Model):

    date = models.CharField(null=True, max_length=200)
    symbol = models.CharField(null=True, max_length=200)
    period = models.CharField(null=True, max_length=200)
    growthRevenue = models.FloatField(null=True)
    growthCostOfRevenue = models.FloatField(null=True)
    growthGrossProfit = models.FloatField(null=True)
    growthGrossProfitRatio = models.FloatField(null=True)
    growthResearchAndDevelopmentExpenses = models.FloatField(null=True)
    growthGeneralAndAdministrativeExpenses = models.FloatField(null=True)
    growthSellingAndMarketingExpenses = models.FloatField(null=True)
    growthOtherExpenses = models.FloatField(null=True)
    growthOperatingExpenses = models.FloatField(null=True)
    growthCostAndExpenses = models.FloatField(null=True)
    growthInterestExpense = models.FloatField(null=True)
    growthDepreciationAndAmortization = models.FloatField(null=True)
    growthEBITDA = models.FloatField(null=True)
    growthEBITDARatio = models.FloatField(null=True)
    growthOperatingIncome = models.FloatField(null=True)
    growthOperatingIncomeRatio = models.FloatField(null=True)
    growthTotalOtherIncomeExpensesNet = models.FloatField(null=True)
    growthIncomeBeforeTax = models.FloatField(null=True)
    growthIncomeBeforeTaxRatio = models.FloatField(null=True)
    growthIncomeTaxExpense = models.FloatField(null=True)
    growthNetIncome = models.FloatField(null=True)
    growthNetIncomeRatio = models.FloatField(null=True)
    growthEPS = models.FloatField(null=True)
    growthEPSDiluted = models.FloatField(null=True)
    growthWeightedAverageShsOut = models.FloatField(null=True)
    growthWeightedAverageShsOutDil = models.FloatField(null=True)


class Profile(models.Model):

    symbol = models.CharField(null=True, max_length=200)
    price = models.FloatField(null=True)
    beta = models.FloatField(null=True)
    volAvg = models.FloatField(null=True)
    mktCap = models.FloatField(null=True)
    lastDiv = models.FloatField(null=True)
    range = models.CharField(null=True, max_length=200)
    changes = models.FloatField(null=True)
    companyName = models.CharField(null=True, max_length=200)
    currency = models.CharField(null=True, max_length=200)
    cik = models.CharField(null=True, max_length=200)
    isin = models.CharField(null=True, max_length=200)
    cusip = models.CharField(null=True, max_length=200)
    exchange = models.CharField(null=True, max_length=200)
    exchangeShortName = models.CharField(null=True, max_length=200)
    industry = models.CharField(null=True, max_length=200)
    website = models.CharField(null=True, max_length=200)
    description = models.CharField(null=True, max_length=200)
    ceo = models.CharField(null=True, max_length=200)
    sector = models.CharField(null=True, max_length=200)
    country = models.CharField(null=True, max_length=200)
    fullTimeEmployees = models.FloatField(null=True)
    phone = models.CharField(null=True, max_length=200)
    address = models.CharField(null=True, max_length=200)
    city = models.CharField(null=True, max_length=200)
    state = models.CharField(null=True, max_length=200)
    zip = models.CharField(null=True, max_length=200)
    dcfDiff = models.FloatField(null=True)
    dcf = models.FloatField(null=True)
    image = models.CharField(null=True, max_length=200)
    ipoDate = models.CharField(null=True, max_length=200)
    defaultImage = models.CharField(null=True, max_length=200)
    isEtf = models.CharField(null=True, max_length=200)
    isActivelyTrading = models.CharField(null=True, max_length=200)


class KeyExecutives(models.Model):

    symbol = models.CharField(null=True, max_length=200)
    title = models.CharField(null=True, max_length=200)
    name = models.CharField(null=True, max_length=200)
    pay = models.FloatField(null=True)
    currencyPay = models.CharField(null=True, max_length=200)
    gender = models.CharField(null=True, max_length=200)
    yearBorn = models.CharField(null=True, max_length=200)
    titleSince = models.CharField(null=True, max_length=200)


class FinGrowth(models.Model):

    symbol = models.CharField(null=True, max_length=200)
    date = models.CharField(null=True, max_length=200)
    period = models.CharField(null=True, max_length=200)
    revenueGrowth = models.FloatField(null=True)
    grossProfitGrowth = models.FloatField(null=True)
    ebitgrowth = models.FloatField(null=True)
    operatingIncomeGrowth = models.FloatField(null=True)
    netIncomeGrowth = models.FloatField(null=True)
    epsgrowth = models.FloatField(null=True)
    epsdilutedGrowth = models.FloatField(null=True)
    weightedAverageSharesGrowth = models.FloatField(null=True)
    weightedAverageSharesDilutedGrowth = models.FloatField(null=True)
    dividendsperShareGrowth = models.FloatField(null=True)
    operatingCashFlowGrowth = models.FloatField(null=True)
    freeCashFlowGrowth = models.FloatField(null=True)
    tenYRevenueGrowthPerShare = models.FloatField(null=True)
    fiveYRevenueGrowthPerShare = models.FloatField(null=True)
    threeYRevenueGrowthPerShare = models.FloatField(null=True)
    tenYOperatingCFGrowthPerShare = models.FloatField(null=True)
    fiveYOperatingCFGrowthPerShare = models.FloatField(null=True)
    threeYOperatingCFGrowthPerShare = models.FloatField(null=True)
    tenYNetIncomeGrowthPerShare = models.FloatField(null=True)
    fiveYNetIncomeGrowthPerShare = models.FloatField(null=True)
    threeYNetIncomeGrowthPerShare = models.FloatField(null=True)
    tenYShareholdersEquityGrowthPerShare = models.FloatField(null=True)
    fiveYShareholdersEquityGrowthPerShare = models.FloatField(null=True)
    threeYShareholdersEquityGrowthPerShare = models.FloatField(null=True)
    tenYDividendperShareGrowthPerShare = models.FloatField(null=True)
    fiveYDividendperShareGrowthPerShare = models.FloatField(null=True)
    threeYDividendperShareGrowthPerShare = models.FloatField(null=True)
    receivablesGrowth = models.FloatField(null=True)
    inventoryGrowth = models.FloatField(null=True)
    assetGrowth = models.FloatField(null=True)
    bookValueperShareGrowth = models.FloatField(null=True)
    debtGrowth = models.FloatField(null=True)
    rdexpenseGrowth = models.FloatField(null=True)
    sgaexpensesGrowth = models.FloatField(null=True)


class Peers(models.Model):

    symbol = models.CharField(null=True, max_length=200)
    peersList = models.CharField(null=True, max_length=200)


class Price(models.Model):

    symbol = models.CharField(null=True, max_length=200)

    date = models.CharField(null=True, max_length=200)
    open = models.FloatField(null=True)
    high = models.FloatField(null=True)
    low = models.FloatField(null=True)
    close = models.FloatField(null=True)
    adjClose = models.FloatField(null=True)
    volume = models.FloatField(null=True)
    unadjustedVolume = models.FloatField(null=True)
    change = models.FloatField(null=True)
    changePercent = models.FloatField(null=True)
    vwap = models.FloatField(null=True)
    label = models.CharField(null=True, max_length=200)
    changeOverTime = models.FloatField(null=True)


class Dividend(models.Model):

    symbol = models.CharField(null=True, max_length=200)

    date = models.CharField(null=True, max_length=200)
    label = models.CharField(null=True, max_length=200)
    adjDividend = models.FloatField(null=True)
    dividend = models.FloatField(null=True)
    recordDate = models.CharField(null=True, max_length=200)
    paymentDate = models.CharField(null=True, max_length=200)
    declarationDate = models.CharField(null=True, max_length=200)


class Institutional(models.Model):
    symbol = models.CharField(null=True, max_length=200)

    holder = models.CharField(null=True, max_length=200)
    shares = models.FloatField(null=True)
    dateReported = models.CharField(null=True, max_length=200)
    change = models.FloatField(null=True)


class MutualFund(models.Model):

    symbol = models.CharField(null=True, max_length=200)
    holder = models.CharField(null=True, max_length=200)
    shares = models.FloatField(null=True)
    dateReported = models.CharField(null=True, max_length=200)
    change = models.FloatField(null=True)
    weightPercent = models.FloatField(null=True)


class EV(models.Model):

    symbol = models.CharField(null=True, max_length=200)
    date = models.CharField(null=True, max_length=200)
    stockPrice = models.FloatField(null=True)
    numberOfShares = models.FloatField(null=True)
    marketCapitalization = models.FloatField(null=True)
    minusCashAndCashEquivalents = models.FloatField(null=True)
    addTotalDebt = models.FloatField(null=True)
    enterpriseValue = models.FloatField(null=True)


class KeyMetricsTTM(models.Model):

    symbol = models.CharField(null=True, max_length=200)
    revenuePerShareTTM = models.FloatField(null=True)
    netIncomePerShareTTM = models.FloatField(null=True)
    operatingCashFlowPerShareTTM = models.FloatField(null=True)
    freeCashFlowPerShareTTM = models.FloatField(null=True)
    cashPerShareTTM = models.FloatField(null=True)
    bookValuePerShareTTM = models.FloatField(null=True)
    tangibleBookValuePerShareTTM = models.FloatField(null=True)
    shareholdersEquityPerShareTTM = models.FloatField(null=True)
    interestDebtPerShareTTM = models.FloatField(null=True)
    marketCapTTM = models.FloatField(null=True)
    enterpriseValueTTM = models.FloatField(null=True)
    peRatioTTM = models.FloatField(null=True)
    priceToSalesRatioTTM = models.FloatField(null=True)
    pocfratioTTM = models.FloatField(null=True)
    pfcfRatioTTM = models.FloatField(null=True)
    pbRatioTTM = models.FloatField(null=True)
    ptbRatioTTM = models.FloatField(null=True)
    evToSalesTTM = models.FloatField(null=True)
    enterpriseValueOverEBITDATTM = models.FloatField(null=True)
    evToOperatingCashFlowTTM = models.FloatField(null=True)
    evToFreeCashFlowTTM = models.FloatField(null=True)
    earningsYieldTTM = models.FloatField(null=True)
    freeCashFlowYieldTTM = models.FloatField(null=True)
    debtToEquityTTM = models.FloatField(null=True)
    debtToAssetsTTM = models.FloatField(null=True)
    netDebtToEBITDATTM = models.FloatField(null=True)
    currentRatioTTM = models.FloatField(null=True)
    interestCoverageTTM = models.FloatField(null=True)
    incomeQualityTTM = models.FloatField(null=True)
    dividendYieldTTM = models.FloatField(null=True)
    dividendYieldPercentageTTM = models.FloatField(null=True)
    payoutRatioTTM = models.FloatField(null=True)
    salesGeneralAndAdministrativeToRevenueTTM = models.FloatField(null=True)
    researchAndDevelopementToRevenueTTM = models.FloatField(null=True)
    intangiblesToTotalAssetsTTM = models.FloatField(null=True)
    capexToOperatingCashFlowTTM = models.FloatField(null=True)
    capexToRevenueTTM = models.FloatField(null=True)
    capexToDepreciationTTM = models.FloatField(null=True)
    stockBasedCompensationToRevenueTTM = models.FloatField(null=True)
    grahamNumberTTM = models.FloatField(null=True)
    roicTTM = models.FloatField(null=True)
    returnOnTangibleAssetsTTM = models.FloatField(null=True)
    grahamNetNetTTM = models.FloatField(null=True)
    workingCapitalTTM = models.FloatField(null=True)
    tangibleAssetValueTTM = models.FloatField(null=True)
    netCurrentAssetValueTTM = models.FloatField(null=True)
    investedCapitalTTM = models.FloatField(null=True)
    averageReceivablesTTM = models.FloatField(null=True)
    averagePayablesTTM = models.FloatField(null=True)
    averageInventoryTTM = models.FloatField(null=True)
    daysSalesOutstandingTTM = models.FloatField(null=True)
    daysPayablesOutstandingTTM = models.FloatField(null=True)
    daysOfInventoryOnHandTTM = models.FloatField(null=True)
    receivablesTurnoverTTM = models.FloatField(null=True)
    payablesTurnoverTTM = models.FloatField(null=True)
    inventoryTurnoverTTM = models.FloatField(null=True)
    roeTTM = models.FloatField(null=True)
    capexPerShareTTM = models.FloatField(null=True)
    dividendPerShareTTM = models.FloatField(null=True)


class KeyMetrics(models.Model):

    symbol = models.CharField(null=True, max_length=200)
    date = models.CharField(null=True, max_length=200)
    period = models.CharField(null=True, max_length=200)
    revenuePerShare = models.FloatField(null=True)
    netIncomePerShare = models.FloatField(null=True)
    operatingCashFlowPerShare = models.FloatField(null=True)
    freeCashFlowPerShare = models.FloatField(null=True)
    cashPerShare = models.FloatField(null=True)
    bookValuePerShare = models.FloatField(null=True)
    tangibleBookValuePerShare = models.FloatField(null=True)
    shareholdersEquityPerShare = models.FloatField(null=True)
    interestDebtPerShare = models.FloatField(null=True)
    marketCap = models.FloatField(null=True)
    enterpriseValue = models.FloatField(null=True)
    peRatio = models.FloatField(null=True)
    priceToSalesRatio = models.FloatField(null=True)
    pocfratio = models.FloatField(null=True)
    pfcfRatio = models.FloatField(null=True)
    pbRatio = models.FloatField(null=True)
    ptbRatio = models.FloatField(null=True)
    evToSales = models.FloatField(null=True)
    enterpriseValueOverEBITDA = models.FloatField(null=True)
    evToOperatingCashFlow = models.FloatField(null=True)
    evToFreeCashFlow = models.FloatField(null=True)
    earningsYield = models.FloatField(null=True)
    freeCashFlowYield = models.FloatField(null=True)
    debtToEquity = models.FloatField(null=True)
    debtToAssets = models.FloatField(null=True)
    netDebtToEBITDA = models.FloatField(null=True)
    currentRatio = models.FloatField(null=True)
    interestCoverage = models.FloatField(null=True)
    incomeQuality = models.FloatField(null=True)
    dividendYield = models.FloatField(null=True)
    payoutRatio = models.FloatField(null=True)
    salesGeneralAndAdministrativeToRevenue = models.FloatField(null=True)
    researchAndDdevelopementToRevenue = models.FloatField(null=True)
    intangiblesToTotalAssets = models.FloatField(null=True)
    capexToOperatingCashFlow = models.FloatField(null=True)
    capexToRevenue = models.FloatField(null=True)
    capexToDepreciation = models.FloatField(null=True)
    stockBasedCompensationToRevenue = models.FloatField(null=True)
    grahamNumber = models.FloatField(null=True)
    roic = models.FloatField(null=True)
    returnOnTangibleAssets = models.FloatField(null=True)
    grahamNetNet = models.FloatField(null=True)
    workingCapital = models.FloatField(null=True)
    tangibleAssetValue = models.FloatField(null=True)
    netCurrentAssetValue = models.FloatField(null=True)
    investedCapital = models.FloatField(null=True)
    averageReceivables = models.FloatField(null=True)
    averagePayables = models.FloatField(null=True)
    averageInventory = models.FloatField(null=True)
    daysSalesOutstanding = models.FloatField(null=True)
    daysPayablesOutstanding = models.FloatField(null=True)
    daysOfInventoryOnHand = models.FloatField(null=True)
    receivablesTurnover = models.FloatField(null=True)
    payablesTurnover = models.FloatField(null=True)
    inventoryTurnover = models.FloatField(null=True)
    roe = models.FloatField(null=True)
    capexPerShare = models.FloatField(null=True)


class AnalysisTools(models.Model):
    tools = models.CharField(null=True, max_length=234)
    super_category = models.CharField(null=True, max_length=234)
    category = models.CharField(null=True, max_length=234)
    subcategory = models.CharField(null=True, max_length=234)
    metrics = models.CharField(null=True, max_length=234)
    description = models.CharField(null=True, max_length=234)
    code = models.CharField(null=True, max_length=234)
    source = models.CharField(null=True, max_length=234)
    nominator = models.CharField(null=True, max_length=234)
    denominator = models.CharField(null=True, max_length=234)
    unit1 = models.CharField(null=True, max_length=234)
    unit2 = models.CharField(null=True, max_length=234)


class CustomMetrics(models.Model):
    tools = models.CharField(max_length=234, null=True)
    measure = models.CharField(max_length=234, null=True)
    category = models.CharField(max_length=234, null=True)
    metrics = models.CharField(max_length=234, null=True)
    source = models.CharField(max_length=234, null=-True)


class CustomRatios(models.Model):
    measure = models.CharField(max_length=234, null=True)
    category = models.CharField(max_length=234, null=True)
    metrics = models.CharField(max_length=234, null=True)
    code = models.CharField(max_length=234, null=True)
    numerator = models.CharField(max_length=234, null=True)
    denominator = models.CharField(max_length=234, null=True)


class ReportedIncome(models.Model):
    company_name = models.CharField(max_length=234, null=True)
    year = models.CharField(max_length=234, null=True)
    post_id = models.CharField(max_length=234, null=True)
    aggregate_code = models.CharField(max_length=234, null=True)
    notes = models.CharField(max_length=234, null=True)
    value1 = models.FloatField(null=True)
    value2 = models.FloatField(null=True)


class ReportedBSheet(models.Model):
    company_name = models.CharField(max_length=234, null=True)
    year = models.CharField(max_length=234, null=True)
    post_id = models.CharField(max_length=234, null=True)
    aggregate_code = models.CharField(max_length=234, null=True)
    notes = models.CharField(max_length=234, null=True)
    value1 = models.FloatField(null=True)
    value2 = models.FloatField(null=True)


class ReportedCFlow(models.Model):
    company_name = models.CharField(max_length=234, null=True)
    year = models.CharField(max_length=234, null=True)
    post_id = models.CharField(max_length=234, null=True)
    aggregate_code = models.CharField(max_length=234, null=True)
    notes = models.CharField(max_length=234, null=True)
    value1 = models.FloatField(null=True)
    value2 = models.FloatField(null=True)


class Rates(models.Model):
    country = models.CharField(max_length=234, null=True)
    year = models.CharField(max_length=234, null=True)
    rate = models.FloatField(null=True)
    rate_type = models.CharField(max_length=234, null=True)


class RevenueLocation(models.Model):
    company_name = models.CharField(max_length=234, null=True)
    year = models.CharField(max_length=234, null=True)
    location = models.CharField(max_length=234, null=True)
    revenueperlocation = models.CharField(max_length=234, null=True)


class RevenueSector(models.Model):
    company_name = models.CharField(max_length=234, null=True)
    year = models.CharField(max_length=234, null=True)
    sector = models.CharField(max_length=234, null=True)
    revenuepersector = models.CharField(max_length=234, null=True)


class AggregateCodes(models.Model):
    aggregate_code = models.CharField(max_length=234, null=True)
    item = models.CharField(max_length=234, null=True)
    source = models.CharField(max_length=234, null=True)


class Ranges(models.Model):
    metrics = models.CharField(max_length=234, null=True)
    name = models.CharField(max_length=234, null=True)
    source = models.CharField(max_length=234, null=True)
    operator = models.CharField(max_length=128, null=True)
    min = models.CharField(max_length=234, null=True)
    max = models.CharField(max_length=234, null=True)
    analysis = models.CharField(max_length=234, null=True)


class Exchanges(models.Model):
    symbol = models.CharField(max_length=234, null=True)
    company_name = models.CharField(max_length=234, null=True)
    isin = models.CharField(max_length=234, null=True)
    sector = models.CharField(max_length=234, null=True)
    industry = models.CharField(max_length=234, null=True)
    exchange = models.CharField(max_length=234, null=True)
    exchange_short_name = models.CharField(max_length=234, null=True)
    country = models.CharField(max_length=234, null=True)
    currency = models.CharField(max_length=234, null=True)
    marketcap = models.CharField(max_length=234, null=True)


class Strategy(models.Model):
    strategy = models.CharField(max_length=234, null=False)
    description = models.CharField(max_length=256, null=True)
    metric = models.CharField(max_length=234, null=False)
    operator = models.CharField(max_length=234, null=False)
    range = models.FloatField(max_length=20, null=False)
    period = models.IntegerField(null=False)


class Metric(models.Model):
    metric = models.CharField(max_length=234, null=False)
    name = models.CharField(max_length=234, null=False)
    source = models.CharField(max_length=234, null=False)
    min = models.FloatField(max_length=20, null=False)
    max = models.FloatField(max_length=20, null=False)
    below_min = models.CharField(max_length=234, null=False)
    equal_min_max = models.CharField(max_length=234, null=False)
    between_min_max = models.CharField(max_length=234, null=False)
    above_max = models.CharField(max_length=234, null=False)


class Model(models.Model):
    id = models.BigIntegerField(null=False, primary_key=True, auto_created=True)
    model = models.CharField(max_length=234, null=False)
    category = models.CharField(max_length=234, null=False)
    question = models.CharField(max_length=234, null=False)
    metric = models.CharField(max_length=234, null=False)
    tool = models.CharField(max_length=234, null=False)
    range = models.CharField(max_length=234, null=False)
    model_from = models.CharField(max_length=234, null=False)
    model_to = models.CharField(max_length=234, null=False)
    display = models.CharField(max_length=234, null=False)
    measure = models.CharField(max_length=234, null=False)


class Advancedratio(models.Model):
    measure = models.CharField(max_length=234, null=True)
    category = models.CharField(max_length=234, null=True)
    metric = models.CharField(max_length=234, null=True)
    code = models.CharField(max_length=234, null=True)
    item1 = models.CharField(max_length=234, null=True)
    operator1 = models.CharField(max_length=234, null=True)
    item2 = models.CharField(max_length=234, null=True)
    operator2 = models.CharField(max_length=234, null=True)
    item3 = models.CharField(max_length=234, null=True)
    operator3 = models.CharField(max_length=234, null=True)
    item4 = models.CharField(max_length=234, null=True)
    operator4 = models.CharField(max_length=234, null=True)
    item5 = models.CharField(max_length=234, null=True)


class AggregatedView(models.Model):
    view = models.CharField(max_length=234, null=True)
    name = models.CharField(max_length=234, null=True)
    item1 = models.CharField(max_length=234, null=True)
    operator1 = models.CharField(max_length=234, null=True)
    item2 = models.CharField(max_length=234, null=True)
    operator2 = models.CharField(max_length=234, null=True)
    item3 = models.CharField(max_length=234, null=True)
    operator3 = models.CharField(max_length=234, null=True)
    item4 = models.CharField(max_length=234, null=True)
    operator4 = models.CharField(max_length=234, null=True)
    item5 = models.CharField(max_length=234, null=True)


class ReportedAgrInco(models.Model):
    company_name = models.CharField(max_length=234, null=True)
    year = models.CharField(max_length=234, null=True)
    post_id = models.CharField(max_length=234, null=True)
    aggregate_code = models.CharField(max_length=234, null=True)
    notes = models.CharField(max_length=234, null=True)
    value1 = models.FloatField(null=True)
    value2 = models.FloatField(null=True)


class Pnl(models.Model):
    date = models.CharField(null=True, max_length=200)
    symbol = models.CharField(null=False, max_length=200)
    revenue = models.FloatField(null=True)
    operatingExpenses = models.FloatField(null=True)
    ebitda = models.FloatField(null=True)
    depreciationAndAmortization = models.CharField(max_length=234, null=True)
    ebit = models.FloatField(null=True)
    interestIncome = models.FloatField(null=True)
    interestExpense = models.FloatField(null=True)
    ebt = models.CharField(max_length=234, null=True)
    nonRecurring = models.CharField(max_length=234, null=True)
    taxes = models.FloatField(null=True)
    effectiveTaxRate = models.FloatField(null=True)
    nopat = models.CharField(max_length=234, null=True)
    netIncome = models.FloatField(null=True)


class FinBsheet(models.Model):
    fixedAssets = models.FloatField(null=True)
    workingCapital = models.FloatField(null=True)
    capitalEmployed = models.FloatField(null=True)
    financialAssets = models.FloatField(null=True)
    equity = models.FloatField(null=True)
    debt = models.FloatField(null=True)
    investedCapital = models.FloatField(null=True)


class FinCflow(models.Model):
    freeCashFlowToTheFirm = models.FloatField(null=True)
    freeCashFlowToTheDebt = models.FloatField(null=True)
    freeCashFlowToEquity = models.FloatField(null=True)
    freeCashFlowToShareholders = models.FloatField(null=True)
    changeInNetCash = models.FloatField(null=True)


class InvestingStyles(models.Model):
    id = models.BigIntegerField(null=False, primary_key=True, auto_created=True)
    style = models.CharField(max_length=128, null=True)
    mentor = models.CharField(max_length=128, null=True)
    strategy_name = models.CharField(max_length=128, null=True)
    source = models.CharField(max_length=256, null=True)
    philosophy = models.CharField(max_length=512, null=True)
    riskTolerance = models.CharField(max_length=128, null=True)
    periodRange = models.CharField(max_length=45, null=True)
    fundReturn = models.CharField(max_length=45, null=True)
    marketReturn = models.CharField(max_length=45, null=True)

class MetricsList(models.Model):
    id = models.BigIntegerField(null=False, primary_key=True, auto_created=True)
    metric = models.CharField(max_length=64, null=True)
    source = models.CharField(max_length=64, null=True)
    tool = models.CharField(max_length=64, null=True)
    measure = models.CharField(max_length=64, null=True)
    category = models.CharField(max_length=64, null=True)
    label = models.CharField(max_length=64, null=True)
    unit = models.CharField(max_length=64, null=True)
    description = models.CharField(max_length=512, null=True)

class DataAcqisitionFileUpload(models.Model):
  file = models.FileField(blank=False, null=False)
  table = models.CharField(max_length=128)

class ForgotPassword(models.Model):
    id = models.BigIntegerField(null=False, primary_key=True, auto_created=True)
    userId = models.IntegerField(null=False)
    token = models.CharField(max_length=256, null=True)
    used = models.BooleanField(default=False)
    generated_time = models.DateTimeField()

class ContactMailInfo(models.Model):
    id = models.BigIntegerField(null=False, primary_key=True, auto_created=True)
    email = models.EmailField(null=False)
    name = models.CharField(max_length=128, null=True)
    subject = models.CharField(max_length=128, null=True)
    message = models.CharField(max_length=512,default=False)
    timestamp = models.DateTimeField()
    responded = models.BooleanField(default=False)

class Queries(models.Model):
    id = models.BigIntegerField(null=False, primary_key=True, auto_created=True)
    question = models.CharField(max_length=256, null=False)
    description = models.CharField(max_length=256, null=True)
    userId = models.IntegerField(null=False)
    timestamp = models.DateTimeField()

class QueryComments(models.Model):
    id = models.BigIntegerField(null=False, primary_key=True, auto_created=True)
    queryId = models.BigIntegerField(null=False)
    comment = models.CharField(max_length=512, null=True)
    timestamp = models.DateTimeField()

class Dcf(models.Model):
    id = models.BigAutoField(null=False, primary_key=True, auto_created=True)
    year = models.CharField(max_length=10, null=True)
    symbol = models.CharField(max_length=64, null=True)
    revenue = models.FloatField(null=True)
    revenuePercentage = models.FloatField(null=True)
    ebitda = models.FloatField(null=True)
    ebitdaPercentage = models.FloatField(null=True)
    ebit = models.FloatField(null=True)
    ebitPercentage = models.FloatField(null=True)
    depreciation = models.FloatField(null=True)
    depreciationPercentage = models.FloatField(null=True)
    totalCash = models.FloatField(null=True)
    totalCashPercentage= models.FloatField(null=True)
    receivables = models.FloatField(null=True)
    receivablesPercentage = models.FloatField(null=True)
    inventories = models.FloatField(null=True)
    inventoriesPercentage = models.FloatField(null=True)
    payable = models.FloatField(null=True)
    payablePercentage = models.FloatField(null=True)
    capitalExpenditure = models.FloatField(null=True)
    capitalExpenditurePercentage = models.FloatField(null=True)
    price = models.FloatField(null=True)
    beta = models.FloatField(null=True)
    dilutedSharesOutstanding = models.FloatField(null=True)
    costofDebt = models.FloatField(null=True)
    taxRate = models.FloatField(null=True)
    afterTaxCostOfDebt = models.FloatField(null=True)
    riskFreeRate = models.FloatField(null=True)
    marketRiskPremium = models.FloatField(null=True)
    costOfEquity = models.FloatField(null=True)
    totalDebt = models.FloatField(null=True)
    totalEquity = models.FloatField(null=True)
    totalCapital = models.FloatField(null=True)
    debtWeighting = models.FloatField(null=True)
    equityWeighting = models.FloatField(null=True)
    wacc = models.FloatField(null=True)
    taxRateCash = models.FloatField(null=True)
    ebiat = models.FloatField(null=True)
    ufcf = models.FloatField(null=True)
    sumPvUfcf = models.FloatField(null=True)
    longTermGrowthRate = models.FloatField(null=True)
    terminalValue = models.FloatField(null=True)
    presentTerminalValue = models.FloatField(null=True)
    enterpriseValue = models.FloatField(null=True)
    netDebt = models.FloatField(null=True)
    equityValue = models.FloatField(null=True)
    equityValuePerShare = models.FloatField(null=True)
    freeCashFlowT1 = models.FloatField(null=True)

class Levereddcf(models.Model):
    id = models.BigAutoField(null=False, primary_key=True, auto_created=True)
    year = models.CharField(max_length=10, null=False)
    symbol = models.CharField(max_length=64, null=False)
    revenue = models.FloatField(blank=True, null=True)
    revenuePercentage = models.FloatField(null=True)
    capitalExpenditure = models.FloatField(null=True)
    capitalExpenditurePercentage = models.FloatField(null=True)
    price = models.FloatField(null=True)
    beta = models.FloatField(null=True)
    dilutedSharesOutstanding = models.FloatField(null=True)
    costofDebt = models.FloatField(null=True)
    taxRate = models.FloatField(null=True)
    afterTaxCostOfDebt = models.FloatField(null=True)
    riskFreeRate = models.FloatField(null=True)
    marketRiskPremium = models.FloatField(null=True)
    costOfEquity = models.FloatField(null=True)
    totalDebt = models.FloatField(null=True)
    totalEquity = models.FloatField(null=True)
    totalCapital = models.FloatField(null=True)
    debtWeighting = models.FloatField(null=True)
    equityWeighting = models.FloatField(null=True)
    wacc = models.FloatField(null=True)
    operatingCashFlow = models.FloatField(null=True)
    pvLfcf = models.FloatField(null=True)
    sumPvLfcf = models.FloatField(null=True)
    longTermGrowthRate = models.FloatField(null=True)
    freeCashFlow = models.FloatField(null=True)
    terminalValue = models.FloatField(null=True)
    presentTerminalValue = models.FloatField(null=True)
    enterpriseValue = models.FloatField(null=True)
    netDebt = models.FloatField(null=True)
    equityValue = models.FloatField(null=True)
    equityValuePerShare = models.FloatField(null=True)
    freeCashFlowT1 = models.FloatField(null=True)
    operatingCashFlowPercentage = models.FloatField(null=True)

class Riskpremium(models.Model):
    id = models.BigAutoField(null=False, primary_key=True, auto_created=True)
    country = models.CharField(max_length=254, null=False)
    continent = models.CharField(max_length=254, null=False)
    totalEquityRiskPremium = models.FloatField(null=True)
    countryRiskPremium = models.FloatField(null=True)

class Fmpcompanies(models.Model):
    id = models.BigAutoField(null=False, primary_key=True, auto_created=True)
    symbol = models.CharField(max_length=64, null=False)
    name = models.CharField(max_length=512, null=False)
    price = models.FloatField(null=True)
    exchange = models.CharField(max_length=256, null=False)
    exchangeShortName = models.CharField(max_length=64, null=False)
    type = models.CharField(max_length=64, null=False)

# class CustomAccountManager(BaseUserManager):

#     def create_superuser(self, email, user_name, first_name, password, **other_fields):

#         other_fields.setdefault('is_staff', True)
#         other_fields.setdefault('is_superuser', True)
#         other_fields.setdefault('is_active', True)

#         if other_fields.get('is_staff') is not True:
#             raise ValueError(
#                 'Superuser must be assigned to is_staff=True.')
#         if other_fields.get('is_superuser') is not True:
#             raise ValueError(
#                 'Superuser must be assigned to is_superuser=True.')

#         return self.create_user(email, user_name, first_name, password, **other_fields)

#     def create_user(self, email, user_name, first_name, password, **other_fields):

#         if not email:
#             raise ValueError(_('You must provide an email address'))

#         email = self.normalize_email(email)
#         user = self.model(email=email, user_name=user_name,
#                           first_name=first_name, **other_fields)
#         user.set_password(password)
#         user.save()
#         return user


# class NewUser(AbstractBaseUser, PermissionsMixin):

#     email = models.EmailField(_('email address') unique=True)
#     user_name = models.CharField(max_length=150, unique=True)
#     first_name = models.CharField(max_length=150, blank=True)
#     start_date = models.DateTimeField(default=timezone.now)
#     about = models.TextField(_(
#         'about') max_length=500, blank=True)
#     is_staff = models.BooleanField(default=False)
#     is_active = models.BooleanField(default=False)

#     objects = CustomAccountManager()

#     USERNAME_FIELD = 'email'
#     REQUIRED_FIELDS = ['user_name', 'first_name']

#     def __str__(self):
#         return self.user_name